(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"7OsV":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("/FXl"),o=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"README.md"}});var r={_frontmatter:s},l=o.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(l,i({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"foxtrotedge"},"@foxtrot/edge"),Object(a.b)("p",null,"A component library for ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/LexSwed/foxtrot"}),Object(a.b)("inlineCode",{parentName:"a"},"foxtrot"))," project."),Object(a.b)("h3",{id:"acknowledgments"},"Acknowledgments"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://tailwindcss.com"}),"TailwindCSS")," for some design inspirations and color palette"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://seek-oss.github.io/braid-design-system"}),"Braid Design System")," for components implementations examples"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://reacttraining.com/reach-ui"}),"@reach/ui")," for accessible inputs logic"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://www.youtube.com/watch?v=EDyiaDJJu-4"}),"Alex Sexton")," for some of the tips for Design Systems")),Object(a.b)("h3",{id:"about-css-in-js-considerations"},"About CSS-in-JS considerations"),Object(a.b)("h4",{id:"i-actually-like-css-in-js"},"I actually like CSS-in-JS:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"you don't need to make up class names"),Object(a.b)("li",{parentName:"ul"},"the composition and styling is easy"),Object(a.b)("li",{parentName:"ul"},"you can use string interpolation to inject common styles and JS properties into CSS, making CSS code more reusable")),Object(a.b)("p",null,"For example, you can export a color scheme or utils from your library:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-js"}),"// in the library:\nexport const spacer = (n) => `${n * 8}px`;\n\nconst style = css`\n  padding: ${spacer(2)};\n`;\n\n// in your project\n\nimport { spacer } from 'lib';\n\nconst style = css`\n  margin: ${spacer(1)};\n`;\n")),Object(a.b)("p",null,"And you have consistent margins and paddings (multipliers of 8 in this example)!"),Object(a.b)("p",null,"I needed ",Object(a.b)("inlineCode",{parentName:"p"},"zero-")," or ",Object(a.b)("inlineCode",{parentName:"p"},"close-to-zero-runtime"),". While ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/seek-oss/treat"}),Object(a.b)("inlineCode",{parentName:"a"},"treat"))," looks promising, ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/callstack/linaria"}),"linaria")," is built for React and I liked it more. It also had reacher docs with configuration and usage examples. However, it cannot properly compose styles, so I can't do that:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-js"}),"const displayFlex = css`\n  display: flex;\n`;\n\nconst myComponent = styled.div`\n  ${displayFlex}\n`;\n")),Object(a.b)("p",null,"It won't add class name of ",Object(a.b)("inlineCode",{parentName:"p"},"displayFlex")," to my component, because ",Object(a.b)("inlineCode",{parentName:"p"},"css")," just returns a className. Alrighty, so we need something with runtime."),Object(a.b)("p",null,"I already tried ",Object(a.b)("inlineCode",{parentName:"p"},"styled-components@5")," and I kinda liked it. But it is a bit slower than precompiled solutions. ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/emotion-js/emotion"}),Object(a.b)("inlineCode",{parentName:"a"},"emotion"))," looks good as far as you need to declare ",Object(a.b)("inlineCode",{parentName:"p"},"@emotion/core")," and ",Object(a.b)("inlineCode",{parentName:"p"},"@emotion/react")," as ",Object(a.b)("inlineCode",{parentName:"p"},"peerDependencies"),". And basically same performance. Among the two I'd chose ",Object(a.b)("inlineCode",{parentName:"p"},"styled-components")," just because it's only one peer dependency."),Object(a.b)("p",null,"There are other solutions considered, like ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/4Catalyzer/astroturf"}),"astroturf"),", or ",Object(a.b)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/glaze"}),"glaze")),Object(a.b)("h4",{id:"but-i-decided"},"But I decided..."),Object(a.b)("p",null,"to stick to a usual setup of ",Object(a.b)("inlineCode",{parentName:"p"},"postcss")," plus ",Object(a.b)("inlineCode",{parentName:"p"},"classnames")," for dynamic classnames assignment. Building this way gives neat folders, less mess with ",Object(a.b)("inlineCode",{parentName:"p"},".ts")," files and ",Object(a.b)("inlineCode",{parentName:"p"},"props")," all around. I can just build my components with neat classnames."),Object(a.b)("p",null,"Upside:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"setup is easy"),Object(a.b)("li",{parentName:"ul"},"using CSS variables is fun, they are composable"),Object(a.b)("li",{parentName:"ul"},"no peer dependencies"),Object(a.b)("li",{parentName:"ul"},"no weird JS/TS(x) files around"),Object(a.b)("li",{parentName:"ul"},"migrating from CSS to other solutions should be easy in the future")),Object(a.b)("p",null,"Downsides:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"I liked Tailwind for the approach of atomic CSS classes. With just ",Object(a.b)("inlineCode",{parentName:"li"},"postcss")," it's hard to share and optimize styles in a composable way (not through class composition please)"),Object(a.b)("li",{parentName:"ul"},"you're not cool for not using CSS-in-JS"),Object(a.b)("li",{parentName:"ul"},"you're stuck with CSS variables (but it's nice feeling actually)"),Object(a.b)("li",{parentName:"ul"},"you can forget CSS variable names even with consistent naming")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"README.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---readme-md-4676831f512c1eeb0232.js.map
{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,2LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,iBAGA,gDAA+B,mBAAGC,WAAW,KAAQ,CACjD,KAAQ,uCACP,0BAAYA,WAAW,KAAvB,YAFL,aAGA,iBAAQ,CACN,GAAM,mBADR,mBAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4BADQ,eAApB,mDAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mDADQ,uBAApB,4CAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,aAApB,gCAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,eAApB,6CAIF,iBAAQ,CACN,GAAM,kCADR,kCAGA,iBAAQ,CACN,GAAM,6BADR,8BAGA,sBACE,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,uCACA,kBAAIA,WAAW,MAAf,uHAEF,+FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mOAiBL,yGACA,iCAAgB,0BAAYA,WAAW,KAAvB,SAAhB,OAAyE,0BAAYA,WAAW,KAAvB,yBAAzE,WAAsJ,mBAAGA,WAAW,KAAQ,CACxK,KAAQ,sCACP,0BAAYA,WAAW,KAAvB,UAFL,qBAEgF,mBAAGA,WAAW,KAAQ,CAClG,KAAQ,yCADoE,WAFhF,4KAKA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8GAUL,mDAAkC,0BAAYA,WAAW,KAAvB,eAAlC,6BAAuH,0BAAYA,WAAW,KAAvB,OAAvH,2EACA,wCAAuB,0BAAYA,WAAW,KAAvB,uBAAvB,6EAAoK,mBAAGA,WAAW,KAAQ,CACtL,KAAQ,0CACP,0BAAYA,WAAW,KAAvB,YAFL,6CAE0G,0BAAYA,WAAW,KAAvB,iBAF1G,QAE4K,0BAAYA,WAAW,KAAvB,kBAF5K,OAE8O,0BAAYA,WAAW,KAAvB,oBAF9O,6DAEwW,0BAAYA,WAAW,KAAvB,qBAFxW,gDAGA,mEAAkD,mBAAGA,WAAW,KAAQ,CACpE,KAAQ,4CADsC,aAAlD,QAE+B,mBAAGA,WAAW,KAAQ,CACjD,KAAQ,wCADmB,UAG/B,iBAAQ,CACN,GAAM,iBADR,oBAGA,qDAAoC,0BAAYA,WAAW,KAAvB,WAApC,SAAiG,0BAAYA,WAAW,KAAvB,cAAjG,4FAAoP,0BAAYA,WAAW,KAAvB,OAApP,cAAkT,0BAAYA,WAAW,KAAvB,SAAlT,qEACA,gCACA,sBACE,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,mDACA,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,uEAEF,mCACA,sBACE,kBAAIA,WAAW,MAAf,sEAA2F,0BAAYA,WAAW,MAAvB,WAA3F,sGACA,kBAAIA,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,oEACA,kBAAIA,WAAW,MAAf,wE,yLAMNJ,EAAWK,gBAAiB","file":"component---readme-md-4676831f512c1eeb0232.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"foxtrotedge\"\n    }}>{`@foxtrot/edge`}</h1>\n    <p>{`A component library for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/LexSwed/foxtrot\"\n      }}><inlineCode parentName=\"a\">{`foxtrot`}</inlineCode></a>{` project.`}</p>\n    <h3 {...{\n      \"id\": \"acknowledgments\"\n    }}>{`Acknowledgments`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com\"\n        }}>{`TailwindCSS`}</a>{` for some design inspirations and color palette`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://seek-oss.github.io/braid-design-system\"\n        }}>{`Braid Design System`}</a>{` for components implementations examples`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reacttraining.com/reach-ui\"\n        }}>{`@reach/ui`}</a>{` for accessible inputs logic`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=EDyiaDJJu-4\"\n        }}>{`Alex Sexton`}</a>{` for some of the tips for Design Systems`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"about-css-in-js-considerations\"\n    }}>{`About CSS-in-JS considerations`}</h3>\n    <h4 {...{\n      \"id\": \"i-actually-like-css-in-js\"\n    }}>{`I actually like CSS-in-JS:`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`you don't need to make up class names`}</li>\n      <li parentName=\"ul\">{`the composition and styling is easy`}</li>\n      <li parentName=\"ul\">{`you can use string interpolation to inject common styles and JS properties into CSS, making CSS code more reusable`}</li>\n    </ul>\n    <p>{`For example, you can export a color scheme or utils from your library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// in the library:\nexport const spacer = (n) => \\`\\${n * 8}px\\`;\n\nconst style = css\\`\n  padding: \\${spacer(2)};\n\\`;\n\n// in your project\n\nimport { spacer } from 'lib';\n\nconst style = css\\`\n  margin: \\${spacer(1)};\n\\`;\n`}</code></pre>\n    <p>{`And you have consistent margins and paddings (multipliers of 8 in this example)!`}</p>\n    <p>{`I needed `}<inlineCode parentName=\"p\">{`zero-`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`close-to-zero-runtime`}</inlineCode>{`. While `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/seek-oss/treat\"\n      }}><inlineCode parentName=\"a\">{`treat`}</inlineCode></a>{` looks promising, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/callstack/linaria\"\n      }}>{`linaria`}</a>{` is built for React and I liked it more. It also had reacher docs with configuration and usage examples. However, it cannot properly compose styles, so I can't do that:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const displayFlex = css\\`\n  display: flex;\n\\`;\n\nconst myComponent = styled.div\\`\n  \\${displayFlex}\n\\`;\n`}</code></pre>\n    <p>{`It won't add class name of `}<inlineCode parentName=\"p\">{`displayFlex`}</inlineCode>{` to my component, because `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` just returns a className. Alrighty, so we need something with runtime.`}</p>\n    <p>{`I already tried `}<inlineCode parentName=\"p\">{`styled-components@5`}</inlineCode>{` and I kinda liked it. But it is a bit slower than precompiled solutions. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/emotion-js/emotion\"\n      }}><inlineCode parentName=\"a\">{`emotion`}</inlineCode></a>{` looks good as far as you need to declare `}<inlineCode parentName=\"p\">{`@emotion/core`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`@emotion/react`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`peerDependencies`}</inlineCode>{`. And basically same performance. Among the two I'd chose `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{` just because it's only one peer dependency.`}</p>\n    <p>{`There are other solutions considered, like `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/4Catalyzer/astroturf\"\n      }}>{`astroturf`}</a>{`, or `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/glaze\"\n      }}>{`glaze`}</a></p>\n    <h4 {...{\n      \"id\": \"but-i-decided\"\n    }}>{`But I decided...`}</h4>\n    <p>{`to stick to a usual setup of `}<inlineCode parentName=\"p\">{`postcss`}</inlineCode>{` plus `}<inlineCode parentName=\"p\">{`classnames`}</inlineCode>{` for dynamic classnames assignment. Building this way gives neat folders, less mess with `}<inlineCode parentName=\"p\">{`.ts`}</inlineCode>{` files and `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` all around. I can just build my components with neat classnames.`}</p>\n    <p>{`Upside:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`setup is easy`}</li>\n      <li parentName=\"ul\">{`using CSS variables is fun, they are composable`}</li>\n      <li parentName=\"ul\">{`no peer dependencies`}</li>\n      <li parentName=\"ul\">{`no weird JS/TS(x) files around`}</li>\n      <li parentName=\"ul\">{`migrating from CSS to other solutions should be easy in the future`}</li>\n    </ul>\n    <p>{`Downsides:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`I liked Tailwind for the approach of atomic CSS classes. With just `}<inlineCode parentName=\"li\">{`postcss`}</inlineCode>{` it's hard to share and optimize styles in a composable way (not through class composition please)`}</li>\n      <li parentName=\"ul\">{`you're not cool for not using CSS-in-JS`}</li>\n      <li parentName=\"ul\">{`you're stuck with CSS variables (but it's nice feeling actually)`}</li>\n      <li parentName=\"ul\">{`you can forget CSS variable names even with consistent naming`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","alt","src","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,2LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,gBAGA,qBAAG,mBAAKC,IAAI,eAAeC,IAAI,2DAA/B,KACF,mBAAGC,WAAW,KAAQ,CAChB,KAAQ,+CACP,mBAAKF,IAAI,MAAMC,IAAI,mDAHxB,KAIF,mBAAGC,WAAW,KAAQ,CAChB,KAAQ,yCACP,mBAAKF,IAAI,uBAAuBC,IAAI,iEANzC,KAOF,mBAAGC,WAAW,KAAQ,CAChB,KAAQ,mDACP,mBAAKF,IAAI,eAAeC,IAAI,0DACjC,gDAA+B,mBAAGC,WAAW,KAAQ,CACjD,KAAQ,uCACP,0BAAYA,WAAW,KAAvB,YAFL,aAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,0DAAyC,mBAAGA,WAAW,KAAQ,CAC3D,KAAQ,2BACP,0BAAYA,WAAW,KAAvB,SAFL,qBAE+E,mBAAGA,WAAW,KAAQ,CACjG,KAAQ,oCADmE,oCAG/E,iBAAQ,CACN,GAAM,mBADR,mBAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4BADQ,eAApB,mDAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mDADQ,uBAApB,4CAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,aAApB,gCAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,eAApB,6CAIF,iBAAQ,CACN,GAAM,gBADR,gBAGA,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sCAIL,+BAAc,0BAAYA,WAAW,KAAvB,QAAd,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4BAIL,yCAAwB,0BAAYA,WAAW,KAAvB,iBAAxB,+IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0IAYL,+CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2NAcL,iBAAQ,CACN,GAAM,SADR,SAGA,wDAAuC,0BAAYA,WAAW,KAAvB,cAAvC,+BAA6H,0BAAYA,WAAW,KAAvB,cAA7H,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sVAiBL,iBAAQ,CACN,GAAM,eADR,eAGA,yCAAwB,0BAAYA,WAAW,KAAvB,QAAxB,8BAAuG,0BAAYA,WAAW,KAAvB,QAAvG,+BACA,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mBAIL,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iBAIL,qHAAoG,0BAAYA,WAAW,KAAvB,QAApG,4BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oBAIL,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iBAIL,2CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4B,yLAQTN,EAAWO,gBAAiB","file":"component---readme-md-6061c2b15c858a569223.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fxtrotedge\"\n    }}>{`@fxtrot/edge`}</h1>\n    <p><img alt=\"Build status\" src=\"https://github.com/LexSwed/edge/workflows/CI/badge.svg\" />{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@fxtrot/edge\"\n      }}><img alt=\"npm\" src=\"https://img.shields.io/npm/v/@fxtrot/edge.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/prettier/prettier\"\n      }}><img alt=\"code style: prettier\" src=\"https://img.shields.io/badge/code_style-prettier-ff69b4.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://bundlephobia.com/result?p=@fxtrot/edge\"\n      }}><img alt=\"bundlephobia\" src=\"https://badgen.net/bundlephobia/minzip/@fxtrot/edge\" /></a></p>\n    <p>{`A component library for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/LexSwed/foxtrot\"\n      }}><inlineCode parentName=\"a\">{`foxtrot`}</inlineCode></a>{` project.`}</p>\n    <h3 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h3>\n    <p>{`The documentation is created with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.docz.site/\"\n      }}><inlineCode parentName=\"a\">{`docz`}</inlineCode></a>{` and hosted here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://lexswed.github.io/edge/\"\n      }}>{`https://lexswed.github.io/edge/`}</a></p>\n    <h3 {...{\n      \"id\": \"acknowledgments\"\n    }}>{`Acknowledgments`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com\"\n        }}>{`TailwindCSS`}</a>{` for some design inspirations and color palette`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://seek-oss.github.io/braid-design-system\"\n        }}>{`Braid Design System`}</a>{` for components implementations examples`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reacttraining.com/reach-ui\"\n        }}>{`@reach/ui`}</a>{` for accessible inputs logic`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=EDyiaDJJu-4\"\n        }}>{`Alex Sexton`}</a>{` for some of the tips for Design Systems`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <p>{`Install the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @fxtrot/edge --save\n`}</code></pre>\n    <p>{`Or via `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @fxtrot/edge\n`}</code></pre>\n    <p>{`Wrap your app in `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` which currently just injects global CSS-variables, but in case there will be some proper CSS-in-JS solution, it can actually do something:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nReactDOM.render(\n  <Edge>\n    <App />\n  </Edge>\n);\n`}</code></pre>\n    <p>{`Or for concurrent mode`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nimport '@fxtrot/edge/styles.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <Edge>\n    <App />\n  </Edge>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`Components are fully typed with `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{`, but you don't have to use `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nimport { TextField } from '@fxtrot/edge';\n\nconst MyComponent = () => {\n  const [text, setText] = React.useState('Hello world!');\n\n  return (\n    <main>\n      <h1>{text}</h1>\n      <TextField value={text} onChange={(e) => setText(e.target.value)} label=\"Welcome message\" />\n    </main>\n  );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"development\"\n    }}>{`Development`}</h3>\n    <p>{`The project uses `}<inlineCode parentName=\"p\">{`tsdx`}</inlineCode>{` to build output files and `}<inlineCode parentName=\"p\">{`docz`}</inlineCode>{` to generate documentation.`}</p>\n    <p>{`First, install dependencies:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn install\n`}</code></pre>\n    <p>{`To work on the library, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn start\n`}</code></pre>\n    <p>{`To work on the documentation or use it as a playground for the components you work on, start `}<inlineCode parentName=\"p\">{`docz`}</inlineCode>{` in a separate terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn docz:dev\n`}</code></pre>\n    <p>{`To build the library use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn build\n`}</code></pre>\n    <p>{`To build the docs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn docz:build\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
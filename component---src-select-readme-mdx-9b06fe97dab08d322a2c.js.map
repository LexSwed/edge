{"version":3,"sources":["webpack:///../src/Select/readme.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Select","Option","Stack","Box","people","React","value","setValue","setTimeout","style","width","onSelect","newValue","placeholder","label","message","map","person","key","icon","lang","tone","disabled","variant","isMDXComponent"],"mappings":"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","file":"component---src-select-readme-mdx-9b06fe97dab08d322a2c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Select, Option, Stack, Box } from '@fxtrot/edge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"select\"\n    }}>{`Select`}</h1>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Select, Option } from '@fxtrot/edge';\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const people = [\\n    \\'Cammy Whisenant\\',\\n    \\'Ethel Schmoll\\',\\n    \\'Jeff Moyes\\',\\n    \\'Darron Summers\\',\\n    \\'Hoyt Sillman\\',\\n    \\'Wendy Acton\\',\\n    \\'Fransisca Mariano\\',\\n    \\'Yolonda Ybarbo\\',\\n    \\'Elvin Charlesworth\\',\\n    \\'Jenna Provo\\',\\n    \\'Kory Bianchi\\',\\n    \\'Evelina Bermudez\\',\\n    \\'Emilee Manske\\',\\n    \\'Chantelle Merkley\\',\\n    \\'Zella Schley\\',\\n    \\'Carmella Legleiter\\',\\n    \\'Salley Parton\\',\\n    \\'Marinda Broadnax\\',\\n    \\'Stephane Tarleton\\',\\n    \\'Paul Haack\\',\\n  ]\\n  const [value, setValue] = React.useState(\\'\\')\\n  React.useEffect(() => {\\n    setTimeout(() => {\\n      setValue(people[3])\\n    }, 1000)\\n  }, [])\\n  return (\\n    <Box style={{ width: \\'240px\\' }}>\\n      <Select\\n        value={value}\\n        onSelect={newValue => setValue(newValue)}\\n        placeholder=\\\"John Doe\\\"\\n        label=\\\"Select assignee\\\"\\n        message=\\\"This person will be assigned to the task\\\"\\n      >\\n        {people.map(person => (\\n          <Option key={person} value={person}>\\n            {person}\\n          </Option>\\n        ))}\\n      </Select>\\n    </Box>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Select,\n      Option,\n      Stack,\n      Box,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const people = ['Cammy Whisenant', 'Ethel Schmoll', 'Jeff Moyes', 'Darron Summers', 'Hoyt Sillman', 'Wendy Acton', 'Fransisca Mariano', 'Yolonda Ybarbo', 'Elvin Charlesworth', 'Jenna Provo', 'Kory Bianchi', 'Evelina Bermudez', 'Emilee Manske', 'Chantelle Merkley', 'Zella Schley', 'Carmella Legleiter', 'Salley Parton', 'Marinda Broadnax', 'Stephane Tarleton', 'Paul Haack'];\n        const [value, setValue] = React.useState('');\n        React.useEffect(() => {\n          setTimeout(() => {\n            setValue(people[3]);\n          }, 1000);\n        }, []);\n        return <Box style={{\n          width: '240px'\n        }} mdxType=\"Box\">\n        <Select value={value} onSelect={newValue => setValue(newValue)} placeholder=\"John Doe\" label=\"Select assignee\" message=\"This person will be assigned to the task\" mdxType=\"Select\">\n          {people.map(person => <Option key={person} value={person} mdxType=\"Option\">\n              {person}\n            </Option>)}\n        </Select>\n      </Box>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"icon\"\n    }}>{`Icon`}</h2>\n    <Playground __position={1} __code={'<Box width={200}>\\n  <Select icon=\\\"public\\\" label=\\\"Language\\\" message=\\\"Language of the app\\\">\\n    {[\\'English\\', \\'Spanish\\', \\'Ukrainian\\'].map(lang => (\\n      <Option key={lang} value={lang}>\\n        {lang}\\n      </Option>\\n    ))}\\n  </Select>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Select,\n      Option,\n      Stack,\n      Box,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={200} mdxType=\"Box\">\n    <Select icon=\"public\" label=\"Language\" message=\"Language of the app\" mdxType=\"Select\">\n      {['English', 'Spanish', 'Ukrainian'].map(lang => <Option key={lang} value={lang} mdxType=\"Option\">\n          {lang}\n        </Option>)}\n    </Select>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"message-and-tone\"\n    }}>{`Message and tone`}</h2>\n    <Playground __position={2} __code={'<Box width={300}>\\n  <Stack>\\n    <Select\\n      label=\\\"Default tone\\\"\\n      message=\\\"Selected person will deploy the app\\\"\\n    >\\n      {[\\'Taran Burt\\', \\'Jaimee Rios\\', \\'Haniya Padilla\\'].map(person => (\\n        <Option key={person} value={person}>\\n          {person}\\n        </Option>\\n      ))}\\n    </Select>\\n    <Select\\n      label=\\\"Critical tone\\\"\\n      message=\\\"Something is incorrect\\\"\\n      tone=\\\"critical\\\"\\n    >\\n      {[\\'Taran Burt\\', \\'Jaimee Rios\\', \\'Haniya Padilla\\'].map(person => (\\n        <Option key={person} value={person}>\\n          {person}\\n        </Option>\\n      ))}\\n    </Select>\\n    <Select\\n      label=\\\"Positive tone\\\"\\n      message=\\\"The selection is okay\\\"\\n      tone=\\\"positive\\\"\\n    >\\n      {[\\'Taran Burt\\', \\'Jaimee Rios\\', \\'Haniya Padilla\\'].map(person => (\\n        <Option key={person} value={person}>\\n          {person}\\n        </Option>\\n      ))}\\n    </Select>\\n    <Select label=\\\"Disabled select\\\" message=\\\"Message is ignored\\\" disabled>\\n      {[\\'Taran Burt\\', \\'Jaimee Rios\\', \\'Haniya Padilla\\'].map(person => (\\n        <Option key={person} value={person}>\\n          {person}\\n        </Option>\\n      ))}\\n    </Select>\\n    <Select\\n      label=\\\"Disabled select\\\"\\n      message=\\\"Message is ignored\\\"\\n      variant=\\\"underlined\\\"\\n    >\\n      {[\\'Taran Burt\\', \\'Jaimee Rios\\', \\'Haniya Padilla\\'].map(person => (\\n        <Option key={person} value={person}>\\n          {person}\\n        </Option>\\n      ))}\\n    </Select>\\n  </Stack>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Select,\n      Option,\n      Stack,\n      Box,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={300} mdxType=\"Box\">\n    <Stack mdxType=\"Stack\">\n      <Select label=\"Default tone\" message=\"Selected person will deploy the app\" mdxType=\"Select\">\n        {['Taran Burt', 'Jaimee Rios', 'Haniya Padilla'].map(person => <Option key={person} value={person} mdxType=\"Option\">\n            {person}\n          </Option>)}\n      </Select>\n      <Select label=\"Critical tone\" message=\"Something is incorrect\" tone=\"critical\" mdxType=\"Select\">\n        {['Taran Burt', 'Jaimee Rios', 'Haniya Padilla'].map(person => <Option key={person} value={person} mdxType=\"Option\">\n            {person}\n          </Option>)}\n      </Select>\n      <Select label=\"Positive tone\" message=\"The selection is okay\" tone=\"positive\" mdxType=\"Select\">\n        {['Taran Burt', 'Jaimee Rios', 'Haniya Padilla'].map(person => <Option key={person} value={person} mdxType=\"Option\">\n            {person}\n          </Option>)}\n      </Select>\n      <Select label=\"Disabled select\" message=\"Message is ignored\" disabled mdxType=\"Select\">\n        {['Taran Burt', 'Jaimee Rios', 'Haniya Padilla'].map(person => <Option key={person} value={person} mdxType=\"Option\">\n            {person}\n          </Option>)}\n      </Select>\n      <Select label=\"Disabled select\" message=\"Message is ignored\" variant=\"underlined\" mdxType=\"Select\">\n        {['Taran Burt', 'Jaimee Rios', 'Haniya Padilla'].map(person => <Option key={person} value={person} mdxType=\"Option\">\n            {person}\n          </Option>)}\n      </Select>\n    </Stack>\n  </Box>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
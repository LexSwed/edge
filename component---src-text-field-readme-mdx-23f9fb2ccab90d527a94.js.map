{"version":3,"sources":["webpack:///../src/TextField/readme.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Playground","TextField","Box","Icon","Stack","Columns","Column","width","label","placeholder","message","React","value","setValue","onChange","e","target","onClear","disabled","inputProps","defaultValue","size","tone","type","display","gridAutoRows","gridTemplateColumns","gridGap","p","bg","variant","icon","isMDXComponent"],"mappings":"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","file":"component---src-text-field-readme-mdx-23f9fb2ccab90d527a94.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground } from 'docz';\nimport { TextField, Box, Icon, Stack, Columns, Column } from '@fxtrot/edge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { TextField } from '@fxtrot/edge';\n`}</code></pre>\n    <Playground __position={0} __code={'<Box width={300}>\\n  <TextField\\n    label=\\\"Full name\\\"\\n    placeholder=\\\"John Doe\\\"\\n    message=\\\"We just want to know how we can approach you\\\"\\n  />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={300} mdxType=\"Box\">\n    <TextField label=\"Full name\" placeholder=\"John Doe\" message=\"We just want to know how we can approach you\" mdxType=\"TextField\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-clear-button\"\n    }}>{`With clear button`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [value, setValue] = React.useState(\\'Clear me\\')\\n  return (\\n    <Box width={300}>\\n      <Stack>\\n        <TextField\\n          label=\\\"Allows clearing the input\\\"\\n          value={value}\\n          onChange={e => setValue(e.target.value)}\\n          onClear={() => setValue(\\'\\')}\\n        />\\n        <TextField\\n          label=\\\"Disabled\\\"\\n          value={value}\\n          onChange={e => setValue(e.target.value)}\\n          onClear={() => setValue(\\'\\')}\\n          disabled\\n        />\\n      </Stack>\\n    </Box>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = React.useState('Clear me');\n        return <Box width={300} mdxType=\"Box\">\n        <Stack mdxType=\"Stack\">\n          <TextField label=\"Allows clearing the input\" value={value} onChange={e => setValue(e.target.value)} onClear={() => setValue('')} mdxType=\"TextField\" />\n          <TextField label=\"Disabled\" value={value} onChange={e => setValue(e.target.value)} onClear={() => setValue('')} disabled mdxType=\"TextField\" />\n        </Stack>\n      </Box>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"be-aware\"\n    }}>{`Be aware`}</h4>\n    <p>{`If you provide `}<inlineCode parentName=\"p\">{`defaultValue`}</inlineCode>{`, but not `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop, the clear button won't be shown, as it only checks for `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop.\nTo fix this, `}<inlineCode parentName=\"p\">{`TextField`}</inlineCode>{` component will need to have an internal state, making the `}<inlineCode parentName=\"p\">{`<input />`}</inlineCode>{`\nalways controlled. This creattes additional overhead and code to cover such rare case.`}</p>\n    <Playground __position={2} __code={'<Box width={300}>\\n  <TextField\\n    label=\\\"Allows clearing the input\\\"\\n    onClear={() => {}}\\n    inputProps={{ defaultValue: \\'Clear me\\' }}\\n  />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={300} mdxType=\"Box\">\n    <TextField label=\"Allows clearing the input\" onClear={() => {}} inputProps={{\n          defaultValue: 'Clear me'\n        }} mdxType=\"TextField\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"message-and-tone\"\n    }}>{`Message and tone`}</h2>\n    <Playground __position={3} __code={'<Box width={300}>\\n  <Stack>\\n    <TextField\\n      label=\\\"Default tone\\\"\\n      size=\\\"s\\\"\\n      message=\\\"This will be used later\\\"\\n    />\\n    <TextField\\n      label=\\\"Critical tone\\\"\\n      size=\\\"m\\\"\\n      message=\\\"The input is incorrect\\\"\\n      tone=\\\"critical\\\"\\n    />\\n    <TextField\\n      label=\\\"Positive tone\\\"\\n      size=\\\"l\\\"\\n      type=\\\"password\\\"\\n      message=\\\"The password seems strong\\\"\\n      tone=\\\"positive\\\"\\n    />\\n  </Stack>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={300} mdxType=\"Box\">\n    <Stack mdxType=\"Stack\">\n      <TextField label=\"Default tone\" size=\"s\" message=\"This will be used later\" mdxType=\"TextField\" />\n      <TextField label=\"Critical tone\" size=\"m\" message=\"The input is incorrect\" tone=\"critical\" mdxType=\"TextField\" />\n      <TextField label=\"Positive tone\" size=\"l\" type=\"password\" message=\"The password seems strong\" tone=\"positive\" mdxType=\"TextField\" />\n    </Stack>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h2>\n    <Playground __position={4} __code={'<Box\\n  display=\\\"grid\\\"\\n  gridAutoRows=\\\"auto\\\"\\n  gridTemplateColumns=\\\"repeat(3, 1fr)\\\"\\n  gridGap=\\\"s\\\"\\n>\\n  <Box p={2}>\\n    <TextField label=\\\"Default variant\\\" />\\n  </Box>\\n  <Box p={2}>\\n    <TextField\\n      label=\\\"Default variant positive\\\"\\n      message=\\\"The input is very much correct\\\"\\n      tone=\\\"positive\\\"\\n    />\\n  </Box>\\n  <Box p={2}>\\n    <TextField label=\\\"Default variant disabled\\\" disabled />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField label=\\\"Underlined\\\" variant=\\\"underlined\\\" />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField\\n      label=\\\"Underlined positive\\\"\\n      variant=\\\"underlined\\\"\\n      message=\\\"The input is very much correct\\\"\\n      tone=\\\"positive\\\"\\n    />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField label=\\\"Underlined disabled\\\" variant=\\\"underlined\\\" disabled />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField label=\\\"Borderless\\\" variant=\\\"borderless\\\" />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField\\n      label=\\\"Borderless positive\\\"\\n      variant=\\\"borderless\\\"\\n      message=\\\"The input is very much correct\\\"\\n      tone=\\\"positive\\\"\\n    />\\n  </Box>\\n  <Box p={2} bg=\\\"shade.100\\\">\\n    <TextField label=\\\"Borderless disabled\\\" variant=\\\"borderless\\\" disabled />\\n  </Box>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box display=\"grid\" gridAutoRows=\"auto\" gridTemplateColumns=\"repeat(3, 1fr)\" gridGap=\"s\" mdxType=\"Box\">\n    <Box p={2} mdxType=\"Box\">\n      <TextField label=\"Default variant\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} mdxType=\"Box\">\n      <TextField label=\"Default variant positive\" message=\"The input is very much correct\" tone=\"positive\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} mdxType=\"Box\">\n      <TextField label=\"Default variant disabled\" disabled mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Underlined\" variant=\"underlined\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Underlined positive\" variant=\"underlined\" message=\"The input is very much correct\" tone=\"positive\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Underlined disabled\" variant=\"underlined\" disabled mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Borderless\" variant=\"borderless\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Borderless positive\" variant=\"borderless\" message=\"The input is very much correct\" tone=\"positive\" mdxType=\"TextField\" />\n    </Box>\n    <Box p={2} bg=\"shade.100\" mdxType=\"Box\">\n      <TextField label=\"Borderless disabled\" variant=\"borderless\" disabled mdxType=\"TextField\" />\n    </Box>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-icon\"\n    }}>{`With icon`}</h2>\n    <Playground __position={5} __code={'<Box width={300}>\\n  <Stack>\\n    <TextField\\n      label=\\\"Default input\\\"\\n      size=\\\"s\\\"\\n      icon=\\\"search\\\"\\n      value=\\\"Small sized\\\"\\n      onChange={() => {}}\\n      onClear={() => {}}\\n    />\\n    <TextField\\n      label=\\\"Underlined\\\"\\n      size=\\\"m\\\"\\n      icon=\\\"search\\\"\\n      value=\\\"Medium sized\\\"\\n      variant=\\\"underlined\\\"\\n      onChange={() => {}}\\n      onClear={() => {}}\\n    />\\n    <TextField\\n      label=\\\"Underlined positive\\\"\\n      size=\\\"l\\\"\\n      icon=\\\"search\\\"\\n      value=\\\"Large sized\\\"\\n      onChange={() => {}}\\n      onClear={() => {}}\\n      variant=\\\"underlined\\\"\\n      tone=\\\"positive\\\"\\n    />\\n    <TextField\\n      label=\\\"Borderless input with icon\\\"\\n      size=\\\"l\\\"\\n      icon=\\\"search\\\"\\n      value=\\\"Large sized\\\"\\n      onChange={() => {}}\\n      onClear={() => {}}\\n      variant=\\\"borderless\\\"\\n    />\\n  </Stack>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      TextField,\n      Box,\n      Icon,\n      Stack,\n      Columns,\n      Column,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={300} mdxType=\"Box\">\n    <Stack mdxType=\"Stack\">\n      <TextField label=\"Default input\" size=\"s\" icon=\"search\" value=\"Small sized\" onChange={() => {}} onClear={() => {}} mdxType=\"TextField\" />\n      <TextField label=\"Underlined\" size=\"m\" icon=\"search\" value=\"Medium sized\" variant=\"underlined\" onChange={() => {}} onClear={() => {}} mdxType=\"TextField\" />\n      <TextField label=\"Underlined positive\" size=\"l\" icon=\"search\" value=\"Large sized\" onChange={() => {}} onClear={() => {}} variant=\"underlined\" tone=\"positive\" mdxType=\"TextField\" />\n      <TextField label=\"Borderless input with icon\" size=\"l\" icon=\"search\" value=\"Large sized\" onChange={() => {}} onClear={() => {}} variant=\"borderless\" mdxType=\"TextField\" />\n    </Stack>\n  </Box>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
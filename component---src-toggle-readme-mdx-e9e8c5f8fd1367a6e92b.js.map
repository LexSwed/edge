{"version":3,"sources":["webpack:///../src/Toggle/readme.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Toggle","Box","Stack","React","toggle","setToggle","checked","label","onChange","display","gridAutoRows","gridTemplateColumns","gridGap","message","disabled","tone","width","space","align","isMDXComponent"],"mappings":"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","file":"component---src-toggle-readme-mdx-e9e8c5f8fd1367a6e92b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Toggle, Box, Stack } from '@fxtrot/edge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Toggle } from '@fxtrot/edge';\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [toggle, setToggle] = React.useState(false)\\n  return (\\n    <Toggle\\n      checked={toggle}\\n      label=\\\"Default toggle\\\"\\n      onChange={() => setToggle(!toggle)}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toggle,\n      Box,\n      Stack,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [toggle, setToggle] = React.useState(false);\n        return <Toggle checked={toggle} label=\"Default toggle\" onChange={() => setToggle(!toggle)} mdxType=\"Toggle\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"tone-and-message\"\n    }}>{`Tone and message`}</h2>\n    <Playground __position={1} __code={'<Box\\n  display=\\\"grid\\\"\\n  gridAutoRows=\\\"auto\\\"\\n  gridTemplateColumns=\\\"repeat(4, 1fr)\\\"\\n  gridGap=\\\"s\\\"\\n>\\n  <Toggle label=\\\"Default toggle\\\" message=\\\"Message for toggle\\\" />\\n  <Toggle\\n    label=\\\"Default toggle checked\\\"\\n    message=\\\"Message for toggle\\\"\\n    checked\\n  />\\n  <Toggle\\n    label=\\\"Default toggle disabled\\\"\\n    message=\\\"Message for toggle\\\"\\n    disabled\\n  />\\n  <Toggle\\n    label=\\\"Default toggle checked disabled\\\"\\n    message=\\\"Message for toggle\\\"\\n    checked\\n    disabled\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Positive tone\\\"\\n    tone=\\\"positive\\\"\\n    message=\\\"Everything is alright\\\"\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Positive tone checked\\\"\\n    tone=\\\"positive\\\"\\n    message=\\\"Everything is alright\\\"\\n    checked\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Positive tone disabled\\\"\\n    tone=\\\"positive\\\"\\n    message=\\\"Everything is alright\\\"\\n    disabled\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Positive tone checked disabled\\\"\\n    tone=\\\"positive\\\"\\n    message=\\\"Everything is alright\\\"\\n    checked\\n    disabled\\n  />\\n\\n  <Toggle\\n    checked={false}\\n    label=\\\"Critical tone\\\"\\n    tone=\\\"critical\\\"\\n    message=\\\"Something went wrong...\\\"\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Critical tone checked\\\"\\n    tone=\\\"critical\\\"\\n    message=\\\"Something went wrong...\\\"\\n    checked\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Critical tone disabled\\\"\\n    tone=\\\"critical\\\"\\n    message=\\\"Something went wrong...\\\"\\n    disabled\\n  />\\n  <Toggle\\n    checked={false}\\n    label=\\\"Critical tone checked disabled\\\"\\n    tone=\\\"critical\\\"\\n    message=\\\"Something went wrong...\\\"\\n    checked\\n    disabled\\n  />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toggle,\n      Box,\n      Stack,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box display=\"grid\" gridAutoRows=\"auto\" gridTemplateColumns=\"repeat(4, 1fr)\" gridGap=\"s\" mdxType=\"Box\">\n    <Toggle label=\"Default toggle\" message=\"Message for toggle\" mdxType=\"Toggle\" />\n    <Toggle label=\"Default toggle checked\" message=\"Message for toggle\" checked mdxType=\"Toggle\" />\n    <Toggle label=\"Default toggle disabled\" message=\"Message for toggle\" disabled mdxType=\"Toggle\" />\n    <Toggle label=\"Default toggle checked disabled\" message=\"Message for toggle\" checked disabled mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Positive tone\" tone=\"positive\" message=\"Everything is alright\" mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Positive tone checked\" tone=\"positive\" message=\"Everything is alright\" checked mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Positive tone disabled\" tone=\"positive\" message=\"Everything is alright\" disabled mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Positive tone checked disabled\" tone=\"positive\" message=\"Everything is alright\" checked disabled mdxType=\"Toggle\" />\n\n        <Toggle checked={false} label=\"Critical tone\" tone=\"critical\" message=\"Something went wrong...\" mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Critical tone checked\" tone=\"critical\" message=\"Something went wrong...\" checked mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Critical tone disabled\" tone=\"critical\" message=\"Something went wrong...\" disabled mdxType=\"Toggle\" />\n        <Toggle checked={false} label=\"Critical tone checked disabled\" tone=\"critical\" message=\"Something went wrong...\" checked disabled mdxType=\"Toggle\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"align\"\n    }}>{`Align`}</h2>\n    <Playground __position={2} __code={'<Box width={400}>\\n  <Stack space=\\\"m\\\">\\n    <Toggle label=\\\"Aligned left\\\" message=\\\"Message for toggle\\\" />\\n    <Toggle\\n      label=\\\"Aligned right\\\"\\n      tone=\\\"critical\\\"\\n      message=\\\"Message for toggle\\\"\\n      align=\\\"right\\\"\\n    />\\n    <Toggle label=\\\"Apart\\\" message=\\\"Message for toggle\\\" align=\\\"apart\\\" />\\n  </Stack>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toggle,\n      Box,\n      Stack,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box width={400} mdxType=\"Box\">\n    <Stack space=\"m\" mdxType=\"Stack\">\n      <Toggle label=\"Aligned left\" message=\"Message for toggle\" mdxType=\"Toggle\" />\n      <Toggle label=\"Aligned right\" tone=\"critical\" message=\"Message for toggle\" align=\"right\" mdxType=\"Toggle\" />\n      <Toggle label=\"Apart\" message=\"Message for toggle\" align=\"apart\" mdxType=\"Toggle\" />\n    </Stack>\n  </Box>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
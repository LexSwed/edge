{"version":3,"sources":["webpack:///../src/usage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,6CACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,sCAIL,+BAAc,0BAAYA,WAAW,KAAvB,QAAd,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4BAIL,yCAAwB,0BAAYA,WAAW,KAAvB,iBAAxB,+IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0IAYL,+CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2NAcL,iBAAQ,CACN,GAAM,SADR,SAGA,wDAAuC,0BAAYA,WAAW,KAAvB,cAAvC,+BAA6H,0BAAYA,WAAW,KAAvB,cAA7H,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4V,6LAqBTJ,EAAWK,gBAAiB","file":"component---src-usage-mdx-b376fbf2371cb01d1b82.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/edge/edge/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <p>{`Install the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @fxtrot/edge --save\n`}</code></pre>\n    <p>{`Or via `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @fxtrot/edge\n`}</code></pre>\n    <p>{`Wrap your app in `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` which currently just injects global CSS-variables, but in case there will be some proper CSS-in-JS solution, it can actually do something:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nReactDOM.render(\n  <Edge>\n    <App />\n  </Edge>\n);\n`}</code></pre>\n    <p>{`Or for concurrent mode`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nimport '@fxtrot/edge/styles.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <Edge>\n    <App />\n  </Edge>\n);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n    <p>{`Components are fully typed with `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{`, but you don't have to use `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nimport { TextField } from '@fxtrot/edge';\n\nconst MyComponent = () => {\n  const [text, setText] = React.useState('Hello world!');\n\n  return (\n    <main>\n      <h1>{text}</h1>\n      <TextField value={text} onChange={(e) => setText(e.target.value)} label=\"Welcome message\" />\n    </main>\n  );\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{HVoQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("/FXl"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/usage.mdx"}});var c={_frontmatter:l},i=r.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(i,o({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"installation"},"Installation"),Object(a.b)("p",null,"Install the library:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-bash"}),"npm install @fxtrot/edge styled-components@5.x --save\n")),Object(a.b)("p",null,"Or via ",Object(a.b)("inlineCode",{parentName:"p"},"yarn"),":"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-bash"}),"yarn add @fxtrot/edge styled-components@5.x\n")),Object(a.b)("p",null,"Wrap your app in ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeProvider")," which currently just injects global CSS-variables, but in case there will be some proper CSS-in-JS solution, it can actually do something:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nReactDOM.render(\n  <Edge>\n    <App />\n  </Edge>\n);\n")),Object(a.b)("p",null,"Or for concurrent mode"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"import ReactDOM from 'react-dom';\n\nimport { Edge } from '@fxtrot/edge';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <Edge>\n    <App />\n  </Edge>\n);\n")),Object(a.b)("h1",{id:"usage"},"Usage"),Object(a.b)("p",null,"Components are fully typed with ",Object(a.b)("inlineCode",{parentName:"p"},"TypeScript"),", but you don't have to use ",Object(a.b)("inlineCode",{parentName:"p"},"TypeScript"),":"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\n\nimport { TextField } from '@fxtrot/edge';\n\nconst MyComponent = () => {\n  const [text, setText] = React.useState('Hello world!');\n\n  return (\n    <main>\n      <h1>{text}</h1>\n      <TextField value={text} onChange={(e) => setText(e.target.value)} label=\"Welcome message\" />\n    </main>\n  );\n};\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/usage.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-usage-mdx-d5d0c894ab69ce312983.js.map